{"meta":{"title":"milicc","subtitle":"","description":"","author":"魔兽世界,奶骑,PVE,团本","url":"https://gmilistar.github.io/cc"},"pages":[],"posts":[{"title":"M1-3 测试","slug":"M1塔拉格鲁","date":"2021-06-22T06:03:01.000Z","updated":"2021-06-22T09:16:09.887Z","comments":true,"path":"2021/06/22/M1塔拉格鲁/","link":"","permalink":"https://gmilistar.github.io/cc/2021/06/22/M1%E5%A1%94%E6%8B%89%E6%A0%BC%E9%B2%81/","excerpt":"","text":"本次测试基于PTR版本39069, 后续如有变动 请以Live上线为优先 # 1丶 塔拉格鲁随着典狱长的阴谋逐渐揭开,玩家追逐着希尔瓦娜斯 终于踏入了这座充满着无尽折磨与绝望的枯寂之地- 托加斯特 技能 心能之力: 进本后需要在诅咒之塔场地四周击杀4个灌魂巨人获取心能之力,注意不要被击飞下悬崖.虽然心能之力可以极大增幅玩家,但这是典狱长给玩家带毒的蜜饯(挖的坑).开荒期请优先选择以下心能. 永恒跳动之心: 对恐惧和昏迷效果免疫, 帮助团队应对技能 永恒锁链 不稳形态: 随机变成虚体,受到伤害-99%,并且随机移出一次负面效果.(减物理圈/魔法圈层数) 共鸣雕像: 魔法伤害-25%,增加物理伤害15% 此心能请尽量不要去吸物理圈 瞬息雕像:.物理伤害-25%,增加魔法伤害15% 此心能请尽量不要去吸魔法圈 监控全团心能之力wa 残迹：上层区域之力物理圈 吸圈会使玩家受到的物理伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人 残迹：灵魂熔炉之灼火焰圈 吸圈会使玩家受到的火焰伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人 残迹：莫尔特雷加的回响魔法圈 吸圈会使玩家受到的魔法伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人 永恒锁链塔拉格鲁凝视一名玩家.8秒后锁链向其方向飞行.击晕第一个目标章程27541点伤害.并释放毁灭猛击(秒杀) 捕食者之嚎塔拉格鲁发出嚎叫,在玩家周围形成恐惧光环,持续21秒,并每三秒使每个对5吗内的其他玩家 恐惧3s.(点名10人) 典狱长的凝视boss10%血之后 小范围击退全团人.移除玩家心能,并且造成伤害+500%. 战术尝试较为便当的一个boss.起手5码分散 应对技能: 捕食者之嚎, boss点名永恒锁链,由带有永恒跳动之心的玩家帮忙档线/无敌冰箱挡/给点名的人保护 皆可应对.捕食者之嚎点名人数较多(10人).并且会对后面的吸圈造成麻烦,需要卡cd驱散.如有人被恐惧了 先驱散恐惧的.,每一轮进迷雾中场集合跑, 迷雾阶段结束 第一时间分散.P2 boss10%后 嗜血 技能开启待补 时间轴腾讯文档M1-10时间轴汇总 WCLwcl地址 # 2丶 塔拉格鲁 待填","categories":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"https://gmilistar.github.io/cc/tags/web/"},{"name":"团本","slug":"团本","permalink":"https://gmilistar.github.io/cc/tags/%E5%9B%A2%E6%9C%AC/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"关于9.1","slug":"关于9.1","date":"2021-06-22T05:41:01.000Z","updated":"2021-06-22T09:14:05.697Z","comments":true,"path":"2021/06/22/关于9.1/","link":"","permalink":"https://gmilistar.github.io/cc/2021/06/22/%E5%85%B3%E4%BA%8E9.1/","excerpt":"","text":"关于 9.1 不知道写啥 随笔. 硬件.大餐食物等开荒物资 可以提前准备了..临近开9.1 物资价格会持续上涨装绑减少 也略微缩短了 各个俱乐部之间的差距请确保号的盟约战役全部完成 否则接不到克希亚的前置引导任务 玩wow第二个全职团本. 因为疫情的原因实在是等的太久太久.如下图所统计.9.0有幸荣获史上最长小版本 相比纳斯利亚堡.统御圣所的副本机制更加多变.开荒难度 自初诞者开始陡然上升.初诞者永远的神! 参与到9.1全程boss的测试.也有幸和其他团队优秀的人一起开荒(小三子, aster.等)..有很多的收获.也更加深刻的认识到这是一个团队游戏.技能的安排.机制的处理, 开荒前的准备等 缺一不可. 软件.9.0的纳堡 长时间开荒后侧面反映出的疲惫状态 也证明了 20人的团队 永远不可能19=1 . 因为看重details 看重hps.贪条等.造成的失误 都会由队友买单.9.1希望由个人转变到团队优先. 测试服的生存指南和Live 有很大差异.ptr注重的是测试环节 步步到位.引出不良连锁..对于技能的处理 大胆去想可行性..比如初诞者大哥.我们曾经试想过怎么让boss的能量达到100!(现在回想起来真是觉得当初是异想天开) 工匠的炸弹 让T带出场. 铁球全员跳崖点传送门等(偷笑) 开坑写一下开荒过程中..一些遇到,踩到的坑..方便回忆 大咕咕收尾.","categories":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"https://gmilistar.github.io/cc/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://gmilistar.github.io/cc/tags/%E6%82%A6%E8%AF%BB/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"算法入门之基础","slug":"算法入门之基础","date":"2020-09-14T11:30:01.000Z","updated":"2021-06-22T09:13:38.912Z","comments":true,"path":"2020/09/14/算法入门之基础/","link":"","permalink":"https://gmilistar.github.io/cc/2020/09/14/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E7%A1%80/","excerpt":"","text":"算法之基础算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。 算法特性 输入 ：可以有零个或多个参数 输出 ：必须有一个或多个结果 有穷性 ：算法必须会结束，没有无限循环 确定性 ：有唯一结果 可行性 ：算法每一步都能通过执行有限次数完成 算法设计要求 正确性 ：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案 算法程序没有语法错误 算法程序对于合法输入能产生期望的答案 算法程序对于非法输入能产生警告和提示 算法程序对于故意掉难得测试输入都能产生期望的结果 可读性 ：算法便于阅读、理解和交流 健壮性 ：能够处理异常、崩溃或莫名其妙的结果 高时间效率和低存储量 ：算法要考虑处理速度和内存用量 算法效率度量方法 事后统计方法：通过执行多个输入测试，记录执行时间平均值 事前估算方法：通过统计方法对算法进行估算，涉及以下因素 算法策略，例子使用公式或者循环等 编译后的代码质量，基础操作的次数统计 问题的输入规模，例子数值大小或元素数量等 机器执行指令的速度，硬件性能 算法基础种类分别有：1、n、n*n。 一般使用公式或瀑布式条件判断的算法策略属于 1；使用单个循环的属于n；使用嵌套循环的属于nn。3 种算法中往往常数算法1 要优于 n 和nn。给以下基础操作次数公式分类： 1：3、5、9等 n：n、n+1、2n+3 等 n*n：n^2、n^2+5、2n^3+1等 一般判断算法好坏，更应该关注函数公式的主项：指数最高项。 比如算法 2n^2+n+3 对比算法 n^3+2n+1，因为2n^2 指数低于 n^3，所以算法2n^2+n+3 优于算法 n^3+2n+1。 怎么分析一个算法的输入时间 抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作 指令计数：统计关联的输入模式下基础操作的数量 求和1-100的算法例子分析以下 算法一 ，算法策略使用 循环 ，编译后的代码质量为n 次，问题的输入规模 100，机器执行指令的速度取决于算法运行所在计算机。 12345JavaScript 算法一let sum = 0, i = 1, n = 100;for (; i &lt;= n; i++) &#123; sum += i; // 执行 n 次&#125; 以下 算法二 ，算法策略使用 公式 ，编译后的代码质量为1 次，问题的输入规模 100，机器执行指令的速度取决于算法运行所在计算机。 123JavaScript 算法二let sum = 0, i = 1, n = 100;sum = (i + n) * n / 2; // 执行 1 次 对比以上算法，它们的输入规模都是 100，在同一计算机运行的情况下， 算法一 的基础操作次数受输入规模的影响，造成工作量超出 算法二 ， 所以算法二效率更高 。 求和 3x3 表格内数值的例子分析以下 表格遍历例子 ，算法策略使用 嵌套的循环 ，编译后的代码质量为n^2 次，问题的输入规模 3x3，机器执行指令的速度取决于算法运行所在计算机。 123456789101112JavaScript 表格遍历求和例子let sum = 0, table = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], ];for (let i = 0; i &lt;= table.length; i++) &#123; for (let j = 0; j &lt;= table[i].length; j++) &#123; sum += table[i][j]; // 执行 n^2 次 &#125;&#125; 以上算法，它根据表格的大小，基础操作的数量是以指数上升的，所以 3x3 的表格内数值总和计算一共有基础操作 3^2 等于 9 次 用大 O 记法表示算法时间复杂度复杂度分为：时间复杂度 或空间复杂度一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。 T(n) = O(f(n))，f(n)为算法的函数或入口，随着输入规模 n 的增长，T(n)增长最慢的算法为最优算法。因为以下原因： 基础操作数量 = 时间 所以当 n 翻倍时，基础操作数量 增长越少，花费的 时间 越少。 上面用到的三个求和算法例子，如果用大 O 表示算法的时间复杂度分别为 O(1)、O(n)、O(n^2)。 大 O 记法表示时间的增长率 O(1)：增长率不变 O(n)：增长率倍数增长 O(n^2)：增长率指数增长 推导大 O 阶方法 用常数 1 取代所有加法常数 只保留最高阶项 最高阶项不是 1 的话，去除这个项相乘的常数 1235` =&gt; `O(1)`，`2n+3` =&gt; `O(n)`，`n(n+1)/2` =&gt; `O(n^2) 一面这个例子的话就是 O(logn)： 12345JavaScriptlet i = 1, n = 100;while (i &lt; n) &#123; i *= 2; // 2^x = n，那么 x = log(2)n，x 为循环次数&#125; 常见的时间复杂度时间复杂度对比：O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)","categories":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"https://gmilistar.github.io/cc/tags/web/"},{"name":"前端","slug":"前端","permalink":"https://gmilistar.github.io/cc/tags/%E5%89%8D%E7%AB%AF/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"HTTP是什么","slug":"Http是什么","date":"2020-09-11T14:16:01.000Z","updated":"2021-06-22T09:02:59.980Z","comments":true,"path":"2020/09/11/Http是什么/","link":"","permalink":"https://gmilistar.github.io/cc/2020/09/11/Http%E6%98%AF%E4%BB%80%E4%B9%88/","excerpt":"","text":"HTTP是什么HTTP 是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍参考链接HTTP协议超级详解 HTTP/1.1HTTP 属于 TCP/IP 中的“顶层”应用层，这说明 HTTP 的包装是数据出发前的第一步。在这里不谈 TCP 相关连接过程，但是 HTTP 请求 / 响应都是要在连接之后的事；想看的话，可以看TCP 三次握手详解及释放连接过程。基本上 HTTP 就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。 HTTP请求方法: GET，一般请求的数据都是不需要处理的数据 HEAD，获取 metadata，打个比方就是电脑上文件右键属性 POST，一般请求的数据都是需要处理的数据 PUT，像数据库的 INSERT DELETE，像数据库的 DELETE PATCH，像数据库的 UPDATE 还有 TRACE、OPTIONS、CONNECT HTTP 状态码： 100 及以上，普通的信息代码 200 及以上，请求成功被处理 300 及以上，请求被重定向了 400 及以上，这是客户方的错 500 及以上，这是服务方的错 HTTP 请求 / 响应报文结构 比较 HTTP/1.1 和 HTTP/2 HTTP/2 在一次 TCP 连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间 HTTP/2 压缩头部信息，包裹更小，运输更方便 HTTP/2 使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送 HTTP/2 允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化 HTTPS在 HTTP 包装外再来个 SSL/TLS 加密包装，HTTPS 有以下特点： 内容加密，传输过程中使用的密文 验证身份，找到对的服务端 保护数据完整性，防止传输过程中被动手脚 基本上传输中的数据不易被动手脚。","categories":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"https://gmilistar.github.io/cc/tags/web/"},{"name":"前端","slug":"前端","permalink":"https://gmilistar.github.io/cc/tags/%E5%89%8D%E7%AB%AF/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"}]}]}