<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>milicc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmilistar.github.io/cc/"/>
  <updated>2021-06-22T09:16:09.887Z</updated>
  <id>https://gmilistar.github.io/cc/</id>
  
  <author>
    <name>魔兽世界,奶骑,PVE,团本</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>M1-3 测试</title>
    <link href="https://gmilistar.github.io/cc/2021/06/22/M1%E5%A1%94%E6%8B%89%E6%A0%BC%E9%B2%81/"/>
    <id>https://gmilistar.github.io/cc/2021/06/22/M1塔拉格鲁/</id>
    <published>2021-06-22T06:03:01.000Z</published>
    <updated>2021-06-22T09:16:09.887Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/baner-01.png" alt=""></p><center> <del>本次测试基于PTR版本39069, 后续如有变动 请以Live上线为优先</del> </center><h1 id="1丶-塔拉格鲁"><a href="#1丶-塔拉格鲁" class="headerlink" title="#  1丶 塔拉格鲁"></a>#  1丶 塔拉格鲁</h1><p>随着典狱长的阴谋逐渐揭开,玩家追逐着希尔瓦娜斯 终于踏入了这座充满着无尽折磨与绝望的枯寂之地- 托加斯特</p><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><ol><li>心能之力: 进本后需要在诅咒之塔场地四周击杀4个<strong>灌魂巨人</strong>获取心能之力,<font color="red">注意不要被击飞下悬崖</font>.虽然心能之力可以极大增幅玩家,但这是典狱长给玩家带毒的蜜饯(挖的坑).开荒期请优先选择以下心能.<ul><li>永恒跳动之心: 对恐惧和昏迷效果免疫, 帮助团队应对技能 永恒锁链</li><li>不稳形态: 随机变成虚体,受到伤害-99%,并且随机移出一次负面效果.(减物理圈/魔法圈层数)</li><li>共鸣雕像: 魔法伤害-25%,增加物理伤害15% 此心能请尽量不要去吸物理圈</li><li>瞬息雕像:.物理伤害-25%,增加魔法伤害15% 此心能请尽量不要去吸魔法圈</li><li><a href="https://wago.io/SoDAnimaPowers">监控全团心能之力wa</a></li></ul></li><li>残迹：上层区域之力<br><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/GIF%202021-6-22%2014-01-19.gif" alt=""><br>物理圈 吸圈会使玩家受到的物理伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人</li><li>残迹：灵魂熔炉之灼<br><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/GIF%202021-6-22%2013-48-57.gif" alt=""><br>火焰圈 吸圈会使玩家受到的火焰伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人</li><li>残迹：莫尔特雷加的回响<br><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/GIF%202021-6-22%2013-50-12.gif" alt=""><br>魔法圈 吸圈会使玩家受到的魔法伤害提高.5名玩家快速吸掉即可. 中有捕食者之嚎的人.进圈要注意不要恐惧到其他人</li><li>永恒锁链<br>塔拉格鲁凝视一名玩家.8秒后锁链向其方向飞行.击晕第一个目标章程27541点伤害.并释放毁灭猛击(秒杀)</li><li>捕食者之嚎<br>塔拉格鲁发出嚎叫,在玩家周围形成恐惧光环,持续21秒,并每三秒使每个对5吗内的其他玩家 恐惧3s.(点名10人)</li><li>典狱长的凝视<br>boss10%血之后 小范围击退全团人.移除玩家心能,并且造成伤害+500%.</li></ol><h3 id="战术尝试"><a href="#战术尝试" class="headerlink" title="战术尝试"></a>战术尝试</h3><p>较为便当的一个boss.起手5码分散 应对技能: 捕食者之嚎, boss点名永恒锁链,由带有永恒跳动之心的玩家帮忙档线/无敌冰箱挡/给点名的人保护 皆可应对.<br>捕食者之嚎点名人数较多(10人).并且会对后面的吸圈造成麻烦,需要卡cd驱散.<font color="red">如有人被恐惧了 先驱散恐惧的.</font>,每一轮进迷雾中场集合跑, 迷雾阶段结束 第一时间分散.<br>P2 boss10%后 嗜血</p><h3 id="技能开启"><a href="#技能开启" class="headerlink" title="技能开启"></a>技能开启</h3><p>待补</p><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><p><a href="https://docs.qq.com/sheet/DWGpPWkNkWXJzemNn">腾讯文档M1-10时间轴汇总</a></p><h3 id="WCL"><a href="#WCL" class="headerlink" title="WCL"></a>WCL</h3><p><a href="https://www.warcraftlogs.com/reports/9Vpjc7LFa2DwYPG3">wcl地址</a></p><hr><h1 id="2丶-塔拉格鲁"><a href="#2丶-塔拉格鲁" class="headerlink" title="#  2丶 塔拉格鲁"></a>#  2丶 塔拉格鲁</h1><p><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/baner-02.png" alt=""></p><h3 id="待填"><a href="#待填" class="headerlink" title="待填"></a>待填</h3>]]></content>
    
    <summary type="html">
    
      M1 M2 M3 测试经验
    
    </summary>
    
      <category term="技术" scheme="https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="https://gmilistar.github.io/cc/tags/web/"/>
    
      <category term="团本" scheme="https://gmilistar.github.io/cc/tags/%E5%9B%A2%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>关于9.1</title>
    <link href="https://gmilistar.github.io/cc/2021/06/22/%E5%85%B3%E4%BA%8E9.1/"/>
    <id>https://gmilistar.github.io/cc/2021/06/22/关于9.1/</id>
    <published>2021-06-22T05:41:01.000Z</published>
    <updated>2021-06-22T09:14:05.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-9-1-不知道写啥-随笔"><a href="#关于-9-1-不知道写啥-随笔" class="headerlink" title="关于 9.1 不知道写啥 随笔."></a>关于 9.1 不知道写啥 随笔.</h2><hr><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件."></a>硬件.</h3><p>大餐食物等开荒物资 可以提前准备了..临近开9.1 物资价格会持续上涨<br>装绑减少 也略微缩短了 各个俱乐部之间的差距<br>请确保号的盟约战役全部完成 否则接不到克希亚的前置引导任务</p><p>玩wow第二个全职团本. 因为疫情的原因实在是等的太久太久.如下图所统计.9.0有幸荣获史上最长小版本</p><p><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/QQ%E5%9B%BE%E7%89%8720210618203011.jpg" alt=""></p><p>相比纳斯利亚堡.统御圣所的副本机制更加多变.开荒难度 自初诞者开始陡然上升.<del>初诞者永远的神!</del></p><p>参与到9.1全程boss的测试.也有幸和其他团队优秀的人一起开荒(小三子, aster.等)..有很多的收获.也更加深刻的认识到这是一个团队游戏.技能的安排.机制的处理, 开荒前的准备等 缺一不可.</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件."></a>软件.</h3><p>9.0的纳堡 长时间开荒后侧面反映出的疲惫状态 也证明了 20人的团队 永远不可能19=1 . 因为看重details 看重hps.贪条等.造成的失误 都会由队友买单.9.1希望由个人转变到团队优先.</p><p>测试服的生存指南和Live 有很大差异.ptr注重的是测试环节 步步到位.引出不良连锁..对于技能的处理 大胆去想可行性..比如初诞者大哥.我们曾经试想过怎么让boss的能量达到100!(<del>现在回想起来真是觉得当初是异想天开</del>) 工匠的炸弹 让T带出场. 铁球全员跳崖点传送门等(偷笑)</p><p>开坑写一下开荒过程中..一些遇到,踩到的坑..方便回忆</p><p><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/QQ%E5%9B%BE%E7%89%8720210618144156.gif" alt=""></p><p>大咕咕收尾.</p>]]></content>
    
    <summary type="html">
    
      --
    
    </summary>
    
      <category term="技术" scheme="https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="https://gmilistar.github.io/cc/tags/web/"/>
    
      <category term="悦读" scheme="https://gmilistar.github.io/cc/tags/%E6%82%A6%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>算法入门之基础</title>
    <link href="https://gmilistar.github.io/cc/2020/09/14/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://gmilistar.github.io/cc/2020/09/14/算法入门之基础/</id>
    <published>2020-09-14T11:30:01.000Z</published>
    <updated>2021-06-22T09:13:38.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法之基础"><a href="#算法之基础" class="headerlink" title="算法之基础"></a>算法之基础</h2><p>算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。</p><h2 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h2><ul><li>输入 ：可以有零个或多个参数</li><li>输出 ：必须有一个或多个结果</li><li>有穷性 ：算法必须会结束，没有无限循环</li><li>确定性 ：有唯一结果</li><li>可行性 ：算法每一步都能通过执行有限次数完成</li></ul><h2 id="算法设计要求"><a href="#算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h2><ul><li>正确性 ：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案</li><li>算法程序没有语法错误</li><li>算法程序对于合法输入能产生期望的答案</li><li>算法程序对于非法输入能产生警告和提示</li><li>算法程序对于故意掉难得测试输入都能产生期望的结果</li><li>可读性 ：算法便于阅读、理解和交流</li><li>健壮性 ：能够处理异常、崩溃或莫名其妙的结果</li><li>高时间效率和低存储量 ：算法要考虑处理速度和内存用量</li></ul><h2 id="算法效率度量方法"><a href="#算法效率度量方法" class="headerlink" title="算法效率度量方法"></a>算法效率度量方法</h2><ul><li><p>事后统计方法：通过执行多个输入测试，记录执行时间平均值</p><ul><li>事前估算方法：通过统计方法对算法进行估算，涉及以下因素</li><li>算法策略，例子使用公式或者循环等</li><li>编译后的代码质量，基础操作的次数统计</li><li>问题的输入规模，例子数值大小或元素数量等</li><li>机器执行指令的速度，硬件性能</li></ul></li><li><p>算法基础种类分别有：1、n、n*n。</p></li><li><p>一般使用公式或瀑布式条件判断的算法策略属于 1；使用单个循环的属于n；使用嵌套循环的属于n<em>n。3 种算法中往往常数算法1 要优于 n 和n</em>n。给以下基础操作次数公式分类：</p><ul><li>1：3、5、9等</li><li>n：n、n+1、2n+3 等</li><li>n*n：n^2、n^2+5、2n^3+1等</li></ul></li><li>一般判断算法好坏，更应该关注函数公式的主项：指数最高项。<ul><li>比如算法 2n^2+n+3 对比算法 n^3+2n+1，因为2n^2 指数低于 n^3，所以算法2n^2+n+3 优于算法 n^3+2n+1。</li></ul></li></ul><h2 id="怎么分析一个算法的输入时间"><a href="#怎么分析一个算法的输入时间" class="headerlink" title="怎么分析一个算法的输入时间"></a>怎么分析一个算法的输入时间</h2><ul><li>抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作</li><li>指令计数：统计关联的输入模式下基础操作的数量</li></ul><h2 id="求和1-100的算法例子分析"><a href="#求和1-100的算法例子分析" class="headerlink" title="求和1-100的算法例子分析"></a>求和1-100的算法例子分析</h2><p>以下 算法一 ，算法策略使用 循环 ，编译后的代码质量为n 次，问题的输入规模 100，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 算法一</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">  sum += i;                  <span class="comment">// 执行 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下 算法二 ，算法策略使用 公式 ，编译后的代码质量为1 次，问题的输入规模 100，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 算法二</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line">sum = (i + n) * n  / <span class="number">2</span>;      <span class="comment">// 执行 1 次</span></span><br></pre></td></tr></table></figure><p>对比以上算法，它们的输入规模都是 100，在同一计算机运行的情况下， 算法一 的基础操作次数受输入规模的影响，造成工作量超出 算法二 ， 所以算法二效率更高 。</p><h2 id="求和-3x3-表格内数值的例子分析"><a href="#求和-3x3-表格内数值的例子分析" class="headerlink" title="求和 3x3 表格内数值的例子分析"></a>求和 3x3 表格内数值的例子分析</h2><p>以下 表格遍历例子 ，算法策略使用 嵌套的循环 ，编译后的代码质量为n^2 次，问题的输入规模 3x3，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 表格遍历求和例子</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, </span><br><span class="line">    table = [</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">      [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= table.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= table[i].length; j++) &#123;</span><br><span class="line">    sum += table[i][j];      <span class="comment">// 执行 n^2 次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上算法，它根据表格的大小，基础操作的数量是以指数上升的，所以 3x3 的表格内数值总和计算一共有基础操作 3^2 等于 9 次 </p><hr><h2 id="用大-O-记法表示算法时间复杂度"><a href="#用大-O-记法表示算法时间复杂度" class="headerlink" title="用大 O 记法表示算法时间复杂度"></a>用大 O 记法表示算法时间复杂度</h2><p>复杂度分为：时间复杂度 或空间复杂度<br>一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。</p><p>T(n) = O(f(n))，f(n)为算法的函数或入口，随着输入规模 n 的增长，T(n)增长最慢的算法为最优算法。因为以下原因：</p><p>基础操作数量 = 时间</p><p>所以当 n 翻倍时，基础操作数量 增长越少，花费的 时间 越少。</p><p>上面用到的三个求和算法例子，如果用大 O 表示算法的时间复杂度分别为 O(1)、O(n)、O(n^2)。</p><p>大 O 记法表示时间的增长率</p><ul><li>O(1)：增长率不变</li><li>O(n)：增长率倍数增长</li><li>O(n^2)：增长率指数增长</li></ul><h2 id="推导大-O-阶方法"><a href="#推导大-O-阶方法" class="headerlink" title="推导大 O 阶方法"></a>推导大 O 阶方法</h2><ol><li>用常数 1 取代所有加法常数</li><li>只保留最高阶项</li><li>最高阶项不是 1 的话，去除这个项相乘的常数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5` =&gt; `O(1)`，</span><br><span class="line">`2n+3` =&gt; `O(n)`，</span><br><span class="line">`n(n+1)/2` =&gt; `O(n^2)</span><br></pre></td></tr></table></figure><p>一面这个例子的话就是 <code>O(logn)</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaScript</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">  i *= <span class="number">2</span>; <span class="comment">// 2^x = n，那么 x = log(2)n，x 为循环次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><p>时间复杂度对比：<br>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>]]></content>
    
    <summary type="html">
    
      算法从入门到入土
    
    </summary>
    
      <category term="技术" scheme="https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="https://gmilistar.github.io/cc/tags/web/"/>
    
      <category term="前端" scheme="https://gmilistar.github.io/cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTTP是什么</title>
    <link href="https://gmilistar.github.io/cc/2020/09/11/Http%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://gmilistar.github.io/cc/2020/09/11/Http是什么/</id>
    <published>2020-09-11T14:16:01.000Z</published>
    <updated>2021-06-22T09:02:59.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP是什么"><a href="#HTTP是什么" class="headerlink" title="HTTP是什么"></a>HTTP是什么</h2><p>HTTP 是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍<br>参考链接<a href="https://www.cnblogs.com/an-wen/p/11180076.html">HTTP协议超级详解</a></p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>HTTP 属于 TCP/IP 中的“顶层”应用层，这说明 HTTP 的包装是数据出发前的第一步。在这里不谈 TCP 相关连接过程，但是 HTTP 请求 / 响应都是要在连接之后的事；想看的话，可以看TCP 三次握手详解及释放连接过程。基本上 HTTP 就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。</p><p>HTTP请求方法: </p><ul><li>GET，一般请求的数据都是不需要处理的数据</li><li>HEAD，获取 metadata，打个比方就是电脑上文件右键属性</li><li>POST，一般请求的数据都是需要处理的数据</li><li>PUT，像数据库的 INSERT</li><li>DELETE，像数据库的 DELETE</li><li>PATCH，像数据库的 UPDATE</li><li>还有 TRACE、OPTIONS、CONNECT</li></ul><p>HTTP 状态码：</p><ul><li>100 及以上，普通的信息代码</li><li>200 及以上，请求成功被处理</li><li>300 及以上，请求被重定向了</li><li>400 及以上，这是客户方的错</li><li>500 及以上，这是服务方的错</li></ul><h3 id="HTTP-请求-响应报文结构"><a href="#HTTP-请求-响应报文结构" class="headerlink" title="HTTP 请求 / 响应报文结构"></a>HTTP 请求 / 响应报文结构</h3><p><img src="https://cdn.jsdelivr.net/gh/gmilistar/ccimg/QQ%E5%9B%BE%E7%89%8720210622160820.png" alt=""></p><h3 id="比较-HTTP-1-1-和-HTTP-2"><a href="#比较-HTTP-1-1-和-HTTP-2" class="headerlink" title="比较 HTTP/1.1 和 HTTP/2"></a>比较 HTTP/1.1 和 HTTP/2</h3><ul><li>HTTP/2 在一次 TCP 连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间</li><li>HTTP/2 压缩头部信息，包裹更小，运输更方便</li><li>HTTP/2 使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送</li><li>HTTP/2 允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化</li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>在 HTTP 包装外再来个 SSL/TLS 加密包装，HTTPS 有以下特点：</p><ol><li>内容加密，传输过程中使用的密文</li><li>验证身份，找到对的服务端</li><li>保护数据完整性，防止传输过程中被动手脚</li></ol><p>基本上传输中的数据不易被动手脚。</p>]]></content>
    
    <summary type="html">
    
      HTTP图解
    
    </summary>
    
      <category term="技术" scheme="https://gmilistar.github.io/cc/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="https://gmilistar.github.io/cc/tags/web/"/>
    
      <category term="前端" scheme="https://gmilistar.github.io/cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
